name: Deploy CS Quiz App to EC2

on:
  push:
    branches:
      - main # main 브랜치에 푸시될 때 실행 (필요시 다른 브랜치로 변경)

jobs:
  build-and-push-docker-image:
    name: Build Docker image and push to Docker Hub
    runs-on: ubuntu-latest

    steps:
      - name: Check out the repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        # Docker 빌드 성능을 향상시키고 다양한 빌드 옵션을 제공합니다.
        uses: docker/setup-buildx-action@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_HUB_USERNAME }} # GitHub Secrets에 저장된 Docker Hub 사용자 이름
          password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }} # GitHub Secrets에 저장된 Docker Hub Access Token

      - name: Extract metadata (tags, labels) for Docker
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: gwanhokim/cs-quiz # Docker Hub 사용자명/이미지명으로 변경
          # 태그 생성 규칙 (예: 커밋 해시, 브랜치명, latest)
          tags: |
            type=sha,prefix=sha-
            type=ref,event=branch
            type=raw,value=latest,enable=${{ github.ref == 'refs/heads/main' }}

      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: . # Dockerfile이 있는 위치 (프로젝트 루트)
          file: ./Dockerfile # Dockerfile 경로
          push: true # 빌드 후 Docker Hub에 푸시
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha # GitHub Actions 캐시 사용 (빌드 속도 향상)
          cache-to: type=gha,mode=max

  deploy-to-ec2:
    name: Deploy to EC2 instance
    needs: build-and-push-docker-image
    runs-on: ubuntu-latest

    steps:
      - name: Deploy to EC2
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST_IP }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
          script: |
            sudo docker pull gwanhokim/cs-quiz:latest

            sudo docker stop cs-quiz-container || true
            sudo docker rm cs-quiz-container || true

            EC2_DB_PATH="/opt/cs-quiz/data" # EC2 호스트의 DB 저장 경로
            sudo mkdir -p ${EC2_DB_PATH}
            # 이 경로의 소유권을 Docker 컨테이너 내부의 nextjs 사용자가 접근 가능하도록 조정이 필요할 수 있습니다.
            # (Docker가 볼륨을 생성할 때 기본적으로 root로 생성하므로, 컨테이너 내부에서 chown이 필요 없을 수도 있고,
            #  또는 Dockerfile의 RUN mkdir -p /app/data && chown nextjs:nodejs /app/data 부분과 연계하여 확인)

            docker run -d --name cs-quiz-container \
              -p 3000:3000 \
              -e DATABASE_URL="file:/app/data/prod.db" \
              -v /opt/cs-quiz/data:/app/data \
              --restart always \
              gwanhokim/cs-quiz:latest

            # 새 컨테이너가 실행된 후, DB 초기화 및 시딩 실행
            echo "Waiting for container to start..."
            sleep 10 # 컨테이너가 완전히 시작될 때까지 잠시 대기 (더 나은 방법은 health check)

            echo "Applying migrations..."
            sudo docker exec cs-quiz-container npx prisma migrate deploy
            echo "Seeding database..."
            sudo docker exec cs-quiz-container npx prisma db seed

            sudo docker image prune -af